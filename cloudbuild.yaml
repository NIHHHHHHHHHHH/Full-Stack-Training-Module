# cloudbuild.yaml
# This file defines the steps for Google Cloud Build to:
# 1. Build your React frontend Docker image.
# 2. Push the image to Google Artifact Registry.
# 3. Deploy the image to your Cloud Run service.

steps:
# Step 1: Build the Docker image for your frontend React app.
# This step uses the 'docker' builder image provided by Google Cloud.
- name: 'gcr.io/cloud-builders/docker'
  args:
    - 'build'
    # Optional: '--no-cache' forces a fresh build, ignoring Docker layer cache.
    # Useful for debugging, but remove for faster builds in production if not needed.
    # - '--no-cache'
    - '-t' # Tag the Docker image with a name and version.
    # The image tag uses Cloud Build's default substitution variables:
    # $_AR_HOSTNAME: Artifact Registry hostname (e.g., asia-south1-docker.pkg.dev)
    # $PROJECT_ID: Your Google Cloud project ID
    # $_AR_REPOSITORY: Your Artifact Registry repository name (e.g., cloud-run-source-deploy)
    # $REPO_NAME: The name of your Git repository (e.g., full-stack-training-module)
    # $_SERVICE_NAME: Your Cloud Run service name (e.g., frontend)
    # $COMMIT_SHA: The Git commit SHA, used as a unique tag for the image version.
    - >-
      $_AR_HOSTNAME/$_AR_PROJECT_ID/$_AR_REPOSITORY/$REPO_NAME/$_SERVICE_NAME:$COMMIT_SHA
    - './' # The build context: '.' means the current directory (the repository root).
           # Docker will look for files relative to this context.
    - '-f' # Specifies the path to the Dockerfile.
    - 'Dockerfile' # The Dockerfile is located at the root of the repository.
    # >>> CRUCIAL LINE: Pass the backend API URL as a build argument to your Dockerfile. <<<
    # The value comes from the Cloud Build substitution variable '_REACT_APP_API_URL'.
    # This ensures 'process.env.REACT_APP_API_URL' is correctly embedded during the React build.
    - '--build-arg=REACT_APP_API_URL=${_REACT_APP_API_URL}'
  id: Build # Assign an ID to this build step for logging and clarity.

# Step 2: Push the built Docker image to Google Artifact Registry.
# This makes the container image available for Cloud Run to pull and deploy.
- name: 'gcr.io/cloud-builders/docker'
  args:
    - 'push'
    - >- # The image tag must exactly match the one used in the 'build' step.
      $_AR_HOSTNAME/$_AR_PROJECT_ID/$_AR_REPOSITORY/$REPO_NAME/$_SERVICE_NAME:$COMMIT_SHA
  id: Push # ID for the push step.

# Step 3: Deploy the new image to your Cloud Run service.
# This step uses the 'gcloud' command-line tool, available in the cloud-sdk builder image.
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim' # 'slim' for a smaller image.
  entrypoint: gcloud # The main command to execute within the container.
  args:
    - 'run'
    - 'deploy' # Command to deploy a Cloud Run service.
    - 'frontend' # Your Cloud Run service name. Ensure this matches your actual service name.
    - '--image' # Specify the Docker image to deploy.
    - >- # The image tag must match the one pushed to Artifact Registry.
      $_AR_HOSTNAME/$_AR_PROJECT_ID/$_AR_REPOSITORY/$REPO_NAME/$_SERVICE_NAME:$COMMIT_SHA
    - '--region=asia-south1' # Your Cloud Run service region.
    - '--platform=managed' # Specify Cloud Run's fully managed environment.
    - '--allow-unauthenticated' # IMPORTANT: Only include this if your frontend should be publicly accessible.
    - '--quiet' # Suppress interactive prompts during deployment.
    # Optional: Add labels to the deployed Cloud Run revision for better organization and traceability.
    - >-
      --labels=managed-by=gcp-cloud-build-deploy-cloud-run,commit-sha=$COMMIT_SHA,gcb-build-id=$BUILD_ID,gcb-trigger-id=$_TRIGGER_ID
  id: Deploy # ID for the deploy step.

# Define substitution variables that will be used in this Cloud Build job.
# These variables can be set in the Cloud Build trigger UI and will override
# any default values provided here.
substitutions:
  # This variable holds the URL of your backend Cloud Run service.
  # Its value will be passed as a build argument to your Dockerfile.
  _REACT_APP_API_URL: 'https://backend-136209257100.asia-south1.run.app' 

# Define the images that will be built and pushed by this Cloud Build job.
# This helps Cloud Build manage Artifact Registry tagging and ensures the image is pushed.
images:
- '$_AR_HOSTNAME/$_AR_PROJECT_ID/$_AR_REPOSITORY/$REPO_NAME/$_SERVICE_NAME:$COMMIT_SHA'